{
  "name": "postcss-import",
  "version": "1.0.3",
  "description": "PostCSS plugin to import CSS files",
  "keywords": [
    "css",
    "postcss",
    "postcss-plugins",
    "import"
  ],
  "author": {
    "name": "Maxime Thirouin"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/postcss-import.git"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "index.js"
  ],
  "dependencies": {
    "clone": "^0.1.17",
    "find-file": "^0.1.4",
    "postcss": "^2.1.0"
  },
  "devDependencies": {
    "css-whitespace": "^1.1.0",
    "jscs": "^1.6.2",
    "jshint": "^2.5.6",
    "tape": "^3.0.0"
  },
  "scripts": {
    "jscs": "jscs *.js **/*.js",
    "jshint": "jshint . --exclude-path .gitignore",
    "test": "npm run jscs && npm run jshint && npm run standalone && tape test"
  },
  "readme": "# postcss-import [![Build Status](https://travis-ci.org/postcss/postcss-import.png)](https://travis-ci.org/postcss/postcss-import)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform `@import` rules by inlining content.\n\n_Note: This plugin works great with [postcss-url](https://github.com/postcss/postcss-url) plugin, which will allow you to adjust assets `url()` (or even inline them) after inlining imported files._\n\n## Installation\n\n    $ npm install postcss-import\n\n## Usage\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\n// css to be processed\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\n\n// process css\nvar output = postcss()\n  .use(atImport())\n  .process(css)\n  .css\n```\n\nUsing this `input.css`:\n\n```css\n@import \"foo.css\";\n\n@import \"bar.css\" (min-width: 25em);\n\nbody {\n  background: black;\n}\n```\n\nwill give you:\n\n```css\n/* ... content of foo.css */\n\n@media (min-width: 25em) {\n/* ... content of bar.css */\n}\n\nbody {\n  background: black;\n}\n```\n\nCheckout [tests](test) for more examples.\n\n### Options\n\n#### encoding\n\nType: `String`  \nDefault: `utf8`\n\nUse if your CSS is encoded in anything other than UTF-8.\n\n#### path\n\nType: `String|Array`  \nDefault: `process.cwd()` or _dirname of [the postcss `from`](https://github.com/postcss/postcss#node-source)_\n\nA string or an array of paths in where to look for files.  \n_Note: nested `@import` will additionally benefit of the relative dirname of imported files._\n\n#### transform\n\nType: `Function`  \nDefault: `null`\n\nA function to transform the content of imported files. Take one argument (file content) & should return the modified content.\n\n#### Example with some options\n\n```js\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\nvar css = postcss()\n  .use(atImport({\n    path: [\n      \"node_modules\",\n    ]\n    transform: require(\"css-whitespace\")\n  }))\n  .process(cssString)\n  .css\n```\n\n---\n\n## Contributing\n\nWork on a branch, install dev-dependencies, respect coding style & run tests before submitting a bug fix or a feature.\n\n    $ git clone https://github.com/postcss/postcss-import.git\n    $ git checkout -b patch-1\n    $ npm install\n    $ npm test\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/postcss-import/issues"
  },
  "homepage": "https://github.com/postcss/postcss-import",
  "_id": "postcss-import@1.0.3",
  "_from": "postcss-import@~1.0.0"
}
