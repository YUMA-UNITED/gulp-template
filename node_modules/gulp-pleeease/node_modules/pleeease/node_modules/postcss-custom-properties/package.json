{
  "name": "postcss-custom-properties",
  "version": "0.2.0",
  "description": "PostCSS plugin to polyfill W3C CSS Custom Properties for cascading variables",
  "keywords": [
    "css",
    "postcss",
    "postcss-plugin",
    "custom-properties",
    "variables",
    "vars"
  ],
  "author": {
    "name": "MoOx"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/postcss-custom-properties.git"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "dependencies": {
    "balanced-match": "~0.1.0"
  },
  "devDependencies": {
    "jscs": "^1.5.9",
    "jshint": "^2.5.2",
    "jshint-stylish": "^0.4.0",
    "postcss": "^2.1.0",
    "tap-colorize": "^1.2.0",
    "tape": "^2.13.4"
  },
  "scripts": {
    "jscs": "jscs *.js **/*.js",
    "jshint": "jshint . --exclude node_modules --reporter node_modules/jshint-stylish/stylish.js",
    "test": "npm run jscs && npm run jshint && tape test | tap-colorize"
  },
  "readme": "# postcss-custom-properties [![Build Status](https://travis-ci.org/postcss/postcss-custom-properties.png)](https://travis-ci.org/postcss/postcss-custom-properties)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform [W3C CSS Custom Properties for cascading variables](http://www.w3.org/TR/css-variables/) syntax to more compatible CSS.\n\n**N.B.** For now the transformation _is not complete_. It currently just aims to provide a future-proof way of using a _limited subset_ of the features provided by native CSS variables.  \n\n_[Checkout opened issue to know the state of this plugin](issues)._\n\nWhy not `postcss-vars` ? Because [there is already a plugin with this name](http://github.com/iamvdo/postcss-vars) that have severals bugs & untested code.\nBut I look forward to merge those 2 plugins & deprecate this one ([see opened issue](https://github.com/iamvdo/postcss-vars/issues/4)).\n\n## Installation\n\n    $ npm install postcss-custom-properties\n\n## Usage\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar customProperties = require(\"postcss-custom-properties\")\n\n// css to be processed\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\n\n// process css using postcss-custom-properties\nvar output = postcss()\n  .use(customProperties())\n  .process(css)\n  .css\n```\n\nUsing this `input.css`:\n\n```css\n:root {\n  --color: red;\n}\n\ndiv {\n  color: var(--color);\n}\n```\n\nyou will get:\n\n```css\ndiv {\n  color: red;\n}\n```\n\nCheckout [tests](test) for more.\n\n### Options\n\n#### `preserve` (default: `false`)\n\nAllow you to preserve custom properties & var() usage in output.\n\n```js\nvar out = postcss()\n  .use(customProperties({preserve: true}))\n  .process(css)\n  .css\n```\n\n#### `map` (default: `{}`)\n\nAllow you to pass an object of variables\n\n---\n\n## Contributing\n\nWork on a branch, install dev-dependencies, respect coding style & run tests before submitting a bug fix or a feature.\n\n    $ git clone https://github.com/postcss/postcss-custom-properties.git\n    $ git checkout -b patch-1\n    $ npm install\n    $ npm test\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/postcss-custom-properties/issues"
  },
  "homepage": "https://github.com/postcss/postcss-custom-properties",
  "_id": "postcss-custom-properties@0.2.0",
  "_from": "postcss-custom-properties@~0.2.0"
}
